<p align="center">
  <img src="URL_PARA_O_LOGO_DO_PASSABOLA" alt="Passa Bola Logo" width="150"/>
</p>

<h1 align="center">Projeto Passa a Bola: Arquitetura IoT</h1>
<p align="center">
  <strong>Sprint 3: Edge Computing & Computer Systems</strong>
</p>
<p align="center">
  Um prot√≥tipo de aplica√ß√£o IoT para coleta e transmiss√£o de dados de partidas de futebol feminino em tempo real.
</p>

<p align="center">
  <img src="https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white" alt="Node.js">
  <img src="https://img.shields.io/badge/MQTT-660066?style=for-the-badge&logo=mqtt&logoColor=white" alt="MQTT">
  <img src="https://img.shields.io/badge/Node--RED-8F0000?style=for-the-badge&logo=node-red&logoColor=white" alt="Node-RED">
</p>

---

## üë• Integrantes do Grupo

| Nome Completo                     | RM     |
| --------------------------------- | ------ |
| **Giovanni Tarzoni Piccin** | 564014 |
| **Enrico Gianni N√≥brega Puttini** | 561400 |
| **Henrique Infanti Coratolo** | 561865 |
| **Jean Carlos Rodrigues da Silva**| 566439 |
| **Bruno Lobosque** | 561254 |

---

## üéØ Descri√ß√£o do Projeto

Este projeto representa a arquitetura inicial de uma aplica√ß√£o de Internet das Coisas (IoT) para o challenge "Passa a Bola", focado no futebol feminino. A solu√ß√£o visa atacar a dor da falta de dados e cobertura em tempo real das partidas, um problema que afeta o engajamento dos torcedores e a profissionaliza√ß√£o da modalidade.

O objetivo √© criar um prot√≥tipo funcional capaz de **coletar** dados simulados de uma partida de futebol, **transmiti-los** atrav√©s de um protocolo leve e eficiente (MQTT), e **visualiz√°-los** em uma plataforma de gerenciamento, demonstrando um fluxo de dados ponta-a-ponta em tempo real.

---

## üèóÔ∏è Arquitetura Proposta

A arquitetura foi desenhada para ser leve, escal√°vel e em tempo real, utilizando componentes padr√£o de mercado para aplica√ß√µes IoT.

### Diagrama Visual
![Diagrama da Arquitetura](diagramaIot.png)

### Explica√ß√£o dos Componentes

O fluxo de dados da nossa arquitetura √© composto por quatro etapas principais:

1.  **Sensor (Dispositivo IoT Simulado):**
    * **Tecnologia:** `Node.js`
    * **Fun√ß√£o:** Atua como um "dispositivo de campo", simulando a coleta de eventos de uma partida (ex: gol, posse de bola). A cada 5 segundos, um novo evento √© gerado e publicado.

2.  **Transmiss√£o (Protocolo):**
    * **Tecnologia:** `MQTT`
    * **Fun√ß√£o:** O sensor "publica" os dados em um t√≥pico MQTT. Este protocolo foi escolhido por ser extremamente leve e r√°pido, ideal para comunica√ß√£o em tempo real em cen√°rios de IoT.

3.  **Broker (Gerenciador de Mensagens):**
    * **Tecnologia:** `HiveMQ` (Broker MQTT p√∫blico)
    * **Fun√ß√£o:** Atua como uma central de mensagens. Ele recebe os dados publicados no t√≥pico `passabola/partida/123` e os distribui para todos os clientes que "assinaram" este t√≥pico.

4.  **Plataforma (Receptor e Visualizador):**
    * **Tecnologia:** `Node-RED`
    * **Fun√ß√£o:** Atua como nossa plataforma de gerenciamento. Um fluxo foi criado para "assinar" o t√≥pico no Broker. Ao receber um novo dado, ele o exibe em tempo real, validando o sucesso da comunica√ß√£o.

---

## üõ†Ô∏è Recursos Necess√°rios

* **Node.js (v18+):** Ambiente de execu√ß√£o para o sensor e o Node-RED.
* **Biblioteca `mqtt` para Node.js:** Para a comunica√ß√£o do sensor com o Broker.
* **Node-RED:** Plataforma visual para cria√ß√£o do fluxo de recebimento.
* **Broker MQTT P√∫blico:** `broker.hivemq.com`.

---

## üöÄ Instru√ß√µes de Uso

Para executar e testar este prot√≥tipo, siga os passos abaixo:

### 1. Clonar o Reposit√≥rio
```bash
git clone [https://github.com/SEU-USUARIO/SEU-REPOSITORIO.git](https://github.com/SEU-USUARIO/SEU-REPOSITORIO.git)
cd SEU-REPOSITORIO
```

### 2. Instalar Depend√™ncias do Sensor
Navegue at√© a pasta do sensor e instale a biblioteca MQTT:
```bash
npm install
```

### 3. Instalar e Iniciar o Node-RED
Se o Node-RED n√£o estiver instalado globalmente, instale-o:
```bash
npm install -g --unsafe-perm node-red
```
Depois, inicie a plataforma em um terminal:
```bash
node-red
```
Acesse a interface em `http://127.0.0.1:1880/` no seu navegador.

### 4. Configurar o Fluxo no Node-RED
1.  Arraste um n√≥ **`mqtt in`** para a √°rea de trabalho.
    * **Server:** `broker.hivemq.com`
    * **Port:** `1883`
    * **Topic:** `passabola/partida/123`
2.  Arraste um n√≥ **`debug`** para a √°rea de trabalho.
3.  Conecte a sa√≠da do n√≥ `mqtt in` √† entrada do n√≥ `debug`.
4.  Clique em **"Deploy"**.

### 5. Executar o Sensor
Em um **novo terminal**, navegue at√© a pasta do sensor e execute o script:
```bash
node sensor.js
```

### 6. Visualizar os Dados
Observe a aba de **Debug** (√≠cone de inseto üêû) no painel direito do Node-RED. Os dados do jogo simulado aparecer√£o a cada 5 segundos, confirmando que a arquitetura est√° 100% funcional.